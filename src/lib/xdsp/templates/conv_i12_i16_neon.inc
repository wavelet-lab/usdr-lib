const uint8x16_t lk0 = {0x80,0x00,0x01,0x02, 0x80,0x03,0x04,0x05, 0x80,0x06,0x07,0x08, 0x80,0x09,0x0a,0x0b};
const uint8x16_t lk1 = {0x80,0x04,0x05,0x06, 0x80,0x07,0x08,0x09, 0x80,0x0a,0x0b,0x0c, 0x80,0x0d,0x0e,0x0f};

const uint64x2_t mask0 = vdupq_n_u64(0xfff00000fff00000);
const uint64x2_t mask1 = vdupq_n_u64(0x0000fff00000fff0);

/*
*  in:
*  |              (2)              |              (1)              |              (0)              |
*  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
*  | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 |
*  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
*  | f15 | f14 | f13 | f12 | f11 | f10 | f9  | f8  | f7  | f6  | f5  | f4  | f3  | f2  | f1  | f0  |
*  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
*  | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | 15| 14| 13| 12| 11| 10| 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
*  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
*  | 17| 16| 15| 14| 13| 12| 11| 10| 0f| 0e| 0d| 0c| 0b| 0a| 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
*  | f   e   d   c   b   a   9   8   7   6   5   4   3   2   1   0
*
*  | f7  | f6  | 0 | f5  | f4  | 0 | f3  | f2  | 0 | f1  | f0  | 0 |    r0
*  | f15 | f14 | 0 | f13 | f12 | 0 | f11 | f10 | 0 | f9  | f8  | 0 |    r1
*
*  |                         res1                                  |                           res0                                |
*  | f15 |0| f14 |0| f13 |0| f12 |0| f11 |0| f10 |0| f9  |0| f8  |0| f7  |0| f6  |0| f5  |0| f4  |0| f3  |0| f2  |0| f1  |0| f0  |0|
*
*/

#define CONVERT_I12_I16_BLOCK(reg0, reg1, res0, res1) \
    {   \
        uint64x2_t r0 = vreinterpretq_u64_u8(vqtbl1q_u8(reg0, lk0)); \
        uint64x2_t r1 = vreinterpretq_u64_u8(vqtbl1q_u8(reg1, lk1)); \
        \
        uint64x2_t r0_0 = vandq_u64(r0, mask0); \
        uint64x2_t r0_1 = vandq_u64(vshrq_n_u64(r0, 4), mask1); \
                   res0 = vreinterpretq_s16_u64(vorrq_u64(r0_0, r0_1)); \
        \
        uint64x2_t r1_0 = vandq_u64(r1, mask0); \
        uint64x2_t r1_1 = vandq_u64(vshrq_n_u64(r1, 4), mask1); \
                   res1 = vreinterpretq_s16_u64(vorrq_u64(r1_0, r1_1)); \
    }
